{"version":3,"sources":["firebase.js","PokemonName.js","Game.js","Landing.js","GameOver.js","UserScores.js","Leaderboard.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","PokemonName","props","className","pokemonName","Game","handleSubmit","e","preventDefault","input","value","state","pokemon","gameCounter","scoreFunction","setState","prevState","gameCounterPlus1","getPokemonImage","getPokemonList","res","newArray","data","results","i","length","randomIndex","Math","floor","random","tempIndex","newArrayNames","forEach","object","push","name","pokeName","axios","url","method","responseType","then","thisImage","sprites","front_default","image","console","log","timer","this","interval","setInterval","endGame","randomOffset","clearInterval","aria-label","aria-hidden","src","alt","onSubmit","htmlFor","type","id","ref","userInput","autoFocus","autoComplete","Component","Landing","onClick","startGame","showLeaderboard","GameOver","addToFirebase","dbRef","database","pushThis","userName","score","finalScore","showHome","handleUserInput","target","pokedex","action","maxLength","required","onChange","UserScores","rank","Leaderboard","users","map","user","index","key","App","getHighScores","on","result","val","userObjects","sort","a","b","topScores","slice","gameState","renderLandingPage","display","leaderDisplay","counter","scores","addScore","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.66a0da53.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDTI7rBK3vUbh7FbKDRzDUfhuJLu5jWsgk\",\r\n    authDomain: \"poketypes-c4369.firebaseapp.com\",\r\n    databaseURL: \"https://poketypes-c4369.firebaseio.com\",\r\n    projectId: \"poketypes-c4369\",\r\n    storageBucket: \"poketypes-c4369.appspot.com\",\r\n    messagingSenderId: \"191931962167\",\r\n    appId: \"1:191931962167:web:1f594c968bd2f5bcac00b2\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react';\r\n\r\nfunction PokemonName(props) { \r\n    return (\r\n        <div className=\"speechBubble\">\r\n            <h2>{props.pokemonName}</h2>\r\n        </div>         \r\n    ) \r\n}\r\n\r\nexport default PokemonName;","import React, { Component } from 'react'; \r\nimport PokemonName from './PokemonName'; \r\nimport axios from 'axios'; \r\n\r\nclass Game extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {  \r\n            pokemon: [],\r\n            image: \"\",\r\n            gameCounter: 0,\r\n            gameCounterPlus1: 1,\r\n            timer: 30\r\n        }\r\n    }    \r\n\r\n    // Starts the timer when Game component is added to the DOM\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => {\r\n            // Update the countdown every second\r\n            this.setState({\r\n                timer: this.state.timer - 1\r\n            })\r\n            if (this.state.timer === 0) {\r\n                // endGame will remove the Game component from the DOM \r\n                this.props.endGame()\r\n            }\r\n        }, 1000);   \r\n\r\n        const randomOffset = Math.floor(Math.random() * 600);\r\n        axios({\r\n            url: `https://pokeapi.co/api/v2/pokemon/?offset=${randomOffset}&limit=30`,\r\n            method: 'GET',\r\n            responseType: 'json'\r\n        }).then((res) => {\r\n            this.getPokemonList(res)\r\n        })\r\n    }  \r\n\r\n    // Clears the timer when Game component is removed from the DOM, even if the user clicks the home button \r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    handleSubmit = (e) => {  \r\n        e.preventDefault();\r\n        const name = this.input.value\r\n        if (name === this.state.pokemon[this.state.gameCounter]) {\r\n            this.props.scoreFunction()\r\n            this.setState(prevState => ({\r\n                gameCounter: prevState.gameCounter + 1,\r\n                gameCounterPlus1: prevState.gameCounterPlus1 + 1\r\n            }))\r\n            // Clears the input field if the user's answer is correct\r\n            this.input.value = '';\r\n            this.input.className = ''; \r\n            this.getPokemonImage(this.state.pokemon[this.state.gameCounterPlus1])  \r\n        } else {\r\n            // set an animation on the input field to tell the user their input is incorrect \r\n            this.input.className=\"error animated shake\";\r\n        }\r\n    }\r\n\r\n    // Get a randomized array of Pokemon that we get from the API\r\n    getPokemonList = (res) => { \r\n        const newArray = [...res.data.results];\r\n        // const newArray = [...res]; \r\n        for (let i = newArray.length - 1; i > 0; i--) {\r\n            const randomIndex = Math.floor(Math.random() * newArray.length);\r\n            const tempIndex = newArray[i];\r\n            newArray[i] = newArray[randomIndex];\r\n            newArray[randomIndex] = tempIndex;\r\n        }  \r\n\r\n        let newArrayNames = [] \r\n        newArray.forEach((object) => {\r\n            newArrayNames.push(object.name) \r\n        })\r\n\r\n        this.setState({\r\n            pokemon: newArrayNames, \r\n        })  \r\n\r\n        // Makes sure that the first Pokemon image is loaded \r\n        this.getPokemonImage(newArrayNames[0]) \r\n    }     \r\n\r\n    // Need to use a different endpoint to grab the images AFTER generating the array of Pokemon names. Only grabbing the images we need.\r\n    getPokemonImage = (pokeName) => {\r\n        axios({\r\n            url: `https://pokeapi.co/api/v2/pokemon/${pokeName}`,\r\n            method: 'GET',\r\n            responseType: 'json'\r\n        }).then((res) => {\r\n            const thisImage = res.data.sprites.front_default\r\n            this.setState({\r\n                image: thisImage\r\n            })\r\n            console.log(thisImage)\r\n        })\r\n    } \r\n    \r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"counterBar\">\r\n                    <p className=\"pokedex\">Pokedex: <span>{this.state.gameCounter}</span></p>\r\n                    <p className=\"timer\" aria-label=\"Timer\"><i className=\"far fa-clock\" aria-hidden=\"true\"></i> <span>{this.state.timer}</span></p>\r\n                </div>\r\n                <PokemonName pokemonName={this.state.pokemon[this.state.gameCounter]} />\r\n                <div className=\"imageContainer\">  \r\n                    <img className=\"pokemonImage\" src={this.state.image} alt=\"\" /> \r\n                </div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"word\">Type the pokemon name to catch!</label>\r\n                    <input type=\"text\" id=\"word\" ref={(userInput) => this.input =\r\n                        userInput} autoFocus=\"autoFocus\" autoComplete=\"off\" />    \r\n                </form> \r\n                <p>Click the enter key to submit</p>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Game;","import React from 'react';\r\n\r\nfunction Landing(props) { \r\n    return (\r\n        <> \r\n            <h1>PokeTypes</h1>\r\n            <p>Test your typing skills and catch as many Pokemon as you can!</p>\r\n            <p>Type the names of Pokemon as they appear on the screen.</p>\r\n            <button type=\"button\" onClick={props.startGame}>Start Game</button>\r\n            <button type=\"button\" onClick={props.showLeaderboard}>Leaderboard</button>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default Landing;","import React, { Component } from 'react'; \r\nimport firebase from './firebase';\r\n\r\nclass GameOver extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userName: \"\"\r\n        }\r\n    }\r\n\r\n    addToFirebase = (e) => {\r\n        e.preventDefault();\r\n        // adds the final score to the leaderboard\r\n        const dbRef = firebase.database().ref()   \r\n        const userName = this.state.userName\r\n        const userScore = this.props.finalScore\r\n        const pushThis = \r\n            { name: userName, score: userScore }\r\n        dbRef.push(pushThis) \r\n        // Go back to home page after registering high score\r\n        this.props.showHome()\r\n    }\r\n\r\n    handleUserInput = (e) => {\r\n        this.setState({\r\n            userName: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Game Over</h3>\r\n                <p>You caught {this.props.pokedex} Pokemon!</p> \r\n                {/*             // make sure user has a limit on their username! \r\n */}\r\n                <form action=\"\" onSubmit={this.addToFirebase}>\r\n                    <label htmlFor=\"username\">Username (max. 15 characters)</label>\r\n                    <input type=\"text\" id=\"username\" name=\"username\" maxLength=\"15\" required value={this.state.userName} onChange={this.handleUserInput}/>\r\n                    <button>Submit your score</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default GameOver; ","import React from 'react'\r\n\r\nfunction UserScores(props) { \r\n    return (\r\n        <li>\r\n            <div>\r\n                <p className=\"rank\">{props.rank}</p>\r\n                <p className=\"userName\">{props.name}</p>\r\n            </div>\r\n            <p className=\"score\">{props.score}</p>\r\n        </li>\r\n    ) \r\n}\r\n\r\nexport default UserScores;","import React, { Component } from 'react'; \r\nimport UserScores from './UserScores';\r\n\r\nclass Leaderboard extends Component {  \r\n \r\n    render() {\r\n        return( \r\n            <>\r\n                <button className=\"homeButton\" onClick={this.props.showHome}>\r\n                    <i className=\"fas fa-home\"></i>\r\n                </button> \r\n                <div className=\"leaderboard\">\r\n                    <h3>Leaderboard</h3>\r\n                    <i className=\"fas fa-crown\"></i>\r\n                    <ol> \r\n                        {this.props.users.map((user, index) => {\r\n                            return (\r\n                                <UserScores\r\n                                    key={index}\r\n                                    rank={index+1}\r\n                                    name={user.name}\r\n                                    score={user.score}\r\n                                />\r\n                            )})\r\n                        }\r\n                    </ol>\r\n                </div>  \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Leaderboard;","import React, { Component } from 'react';\nimport './App.css';  \nimport firebase from './firebase';\nimport Game from './Game.js'; \nimport Landing from './Landing.js';\nimport GameOver from './GameOver.js';\nimport Leaderboard from './Leaderboard.js'; \n\nclass App extends Component {  \n  constructor() {\n    super();\n    this.state = {\n      // Renders landing page on page load  \n      gameState: <Landing\n        startGame={() => this.startGame()}\n        showLeaderboard={() => this.showLeaderboard()}\n      />,\n      counter: 0, \n      timer: 20,\n      users: []\n    } \n  } \n\n  // Get the highscores saved in Firebase  \n  getHighScores = () => {\n    // Sets up listener to firebase database\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (result) => {\n      // Gets all data from Firebase\n      const data = result.val();\n      const userObjects = [];\n      // Extracts only the objects containing name and score\n      for (let key in data) {\n        userObjects.push(data[key])\n      }\n      // Sorts the array of users by their score\n      userObjects.sort((a, b) => b.score - a.score);\n      // Saves only the top 10 high scores and usernames\n      const topScores = userObjects.slice(0, 10)\n      this.setState({\n        users: topScores\n      })\n    })\n  }\n\n  // When button is clicked, get the data from Firebase\n  showLeaderboard = () => {\n    this.setState({\n      gameState: <Leaderboard \n        showHome={() => this.renderLandingPage()} \n        users={this.state.users} \n        display={this.state.leaderDisplay}\n      />\n    }) \n  }\n\n  renderLandingPage = () => {\n    this.setState({\n      gameState: <Landing\n        startGame={() => this.startGame()}\n        showLeaderboard={() => this.showLeaderboard()}\n      />\n    }) \n  }\n\n  componentDidMount() {\n    this.getHighScores() \n  }\n\n  endGame = () => {\n    this.setState({\n      gameState: <GameOver\n        pokedex={this.state.counter} \n        finalScore={this.state.counter}\n        showHome={() => this.renderLandingPage()}\n      />,\n      scores: this.state.counter\n    })\n  }\n\n  addScore = () => { \n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n\n  // When user clicks \"Start Game\" button, set tate to render Game and remove Landing page\n  startGame = () => {\n    this.setState({\n      gameState: <Game   \n        endGame={() => this.endGame()}\n        scoreFunction={() => this.addScore()}   \n      />,\n      counter:0\n    })\n  }\n\n  // Add a game mode (easy, medium, hard)\n  render(){ \n    return (\n      <div className=\"App\"> \n        <main>\n          <div className=\"wrapper\">\n            {this.state.gameState} \n          </div>\n        </main>\n        <footer>\n          <p>© 2020 <a href=\"https://robinnong.com\">Robin Nong</a>. View the code <a href=\"https://github.com/robinnong/poketypes\">here</a>.</p>\n        </footer>\n      </div>\n    )\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}